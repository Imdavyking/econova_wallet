Great question ‚Äî you're already running a powerful agent-based smart wallet with tools like:

* `QRY_getAddress`
* `QRY_getBalance`
* `QRY_resolveDomainName`
* `CMD_transferBalance`

To level this up into a **next-gen Starknet DeFi copilot**, here are **additional tools** you can integrate that pair well with Starknet's features and your AI agent architecture:

---

## üß∞ Additional Tool Ideas by Function

### üîÑ 1. **Swapping Tokens**

#### Tool: `CMD_swapTokens`

```ts
Input: { fromToken: string, toToken: string, amount: number }
```

* Use DEX APIs (like Jediswap or SithSwap)
* Can fetch best route using aggregator if available
* Trigger a swap Cairo contract

‚û°Ô∏è *Prompt:* "Swap 50 STRK to USDC"

---

### üìä 2. **Check Token Prices**

#### Tool: `QRY_getTokenPrice`

```ts
Input: { tokenSymbol: string }
```

* Call an on-chain or oracle-based price feed (e.g., Pragma, Empiric)
* Fallback to API (CoinGecko) for mobile dev

‚û°Ô∏è *Prompt:* "What's the current price of ETH?"

---

### üßÆ 3. **Portfolio Summary**

#### Tool: `QRY_getPortfolio`

```ts
Input: { address?: string }
```

* Fetch balances of multiple tokens
* Return a table of balances, USD value (if price tool exists)

‚û°Ô∏è *Prompt:* "What's my Starknet portfolio look like?"

---

### üè¶ 4. **Staking / Yield Farming**

#### Tool: `CMD_stakeTokens`, `CMD_unstakeTokens`

```ts
Input: { amount: number, stakingPoolId: string }
```

* Call into staking contracts (e.g., STRK staking, ve(3,3) vote lockers)
* Can also include voting power info

‚û°Ô∏è *Prompt:* "Stake 200 STRK in the governance pool"

---

### üìà 5. **View Rewards / Claim Airdrops**

#### Tool: `QRY_getRewards`, `CMD_claimRewards`

```ts
Input: { protocol: string }
```

* Fetch pending rewards from DeFi protocols
* Claim via Cairo contract

‚û°Ô∏è *Prompt:* "Claim my airdrops from my wallet"

---

### üí° 6. **Estimate Gas Fees**

#### Tool: `QRY_estimateFee`

```ts
Input: { txType: string, token?: string }
```

* Starknet supports `estimate_fee` natively
* Can suggest gasless UX if fee > threshold

‚û°Ô∏è *Prompt:* "How much will this transaction cost?"

---

### üß† 7. **ZK Identity / Reputation**

#### Tool: `QRY_getZKReputation`

```ts
Input: { address: string }
```

* Use ZK badge protocols (e.g., Sismo, Proof of Humanity)
* Could verify DAO voting eligibility or token-gated access

‚û°Ô∏è *Prompt:* "Do I qualify for the next zkDAO vote?"

---

### üó≥Ô∏è 8. **Governance Voting**

#### Tool: `CMD_voteProposal`

```ts
Input: { proposalId: string, vote: 'yes' | 'no' }
```

* Vote on DAO proposals
* Pull in proposal context (title, description) using external APIs if needed

‚û°Ô∏è *Prompt:* "Vote yes on proposal #23"

---

### üîê 9. **Backup / Export Wallet (optional)**

#### Tool: `CMD_backupWallet`

```ts
Input: { format: 'json' | 'qr' }
```

* Securely export Starknet account key (e.g., to encrypted QR)
* Could use biometric prompt in mobile

‚û°Ô∏è *Prompt:* "Backup my wallet to QR code"

---

## üß† Pro Tip: Combine Tools with **AI Memory**

* Track coin preferences per user
* Auto-suggest token swap paths
* Remember common addresses/domains
* Cache past balances, votes, and transactions

---

Would you like me to:

1. Create stub code for one or more of these tools?
2. Help you auto-generate tool registration boilerplate in your LangChain agent?

Let me know how deep you want to go.
